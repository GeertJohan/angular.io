include _util-fns

:marked
  # What is ES6?

  ES6 is a significant evolution of the JavaScript language. It is officially known as ES2015, but
  it is typically referred to as ES6. Many major additions and improvements were added to the
  language that make writing modern web applications easier than before. In fact, more features
  are being added on a yearly basis, so you should think about it not just as ES6 but as modern
  JavaScript.

  While the history of ES6 is a fascinating subject, you are most likely interested in learning the
  primary features that Angular uses. This guide will walk through the most important features
  that have been added to JavaScript that can make development easier.

  # How can I use ES6+ features?

  Before we dig into the features, you need to know that browser support for these features is limited.
  It will be a while before all major browsers properly support the new syntax and since new features
  are added regularly (and users don't always update quickly), we must employ the use of a transpiler
  to convert newer syntax into a format current browsers can understand.

  In Angular, [TypeScript](https://typescriptlang.org) is the most common transpiler tool, since Angular itself is built with TypeScript.
  You can use TypeScript just as a compiler even if you don't use the typing features it provides.
  Alternatively, [Babel](https://babeljs.io) is a popular choice with a large community. There are other options, most
  of which can be found at this [GitHub repo](https://github.com/addyosmani/es6-tools#transpilers).

  Your choice of transpiler is one that you can change at a later date, so we'd recommend starting
  with TypeScript and changing if you feel the need.

  Now let's start to dig into the primary features and how they are most commonly used with Angular.

  # Modules

  Modules are a programming concept to help structure code that is decoupled and independent of other
  parts of the code. JavaScript has had several module formats for years, most notably CommonJS and AMD. NodeJS developers
  have been using the CommonJS format to modularize their code. ES6 introduces a new format that we'll leverage.

  # Classes

  # Decorators

  # Arrow Functions

  # Let and Const Keywords

  # Template Strings

  # Default Parameter Values

  # Rest Operator

  # Spread Operator

  # Promises
