include ../../../../_includes/_util-fns

:marked
  ## Component Communication

  Real applications rarely use a single component to implement the entire functionality of the app. To create structured, testable 
  and maintainable applications, we'd better decompose the entire logic into a set of loosely-coupled (or decoupled) components.
  This way, we can create smaller building blocks with their own boundaries of responsibility, and compose the entire application
  from them.
  
  Generally, an Angular app is a tree or forest of components, and so it has parent and child components. Evidently, these components have to communicate
  with each other. As we already learned, _component_ is a pivotal concept of Angular, and it was designed with _inter-component 
  communication_ in mind. Thinking about an app as a tree of components, we can envision the following information flows:
  * Parent to child (and children)
  * Child to parent
  * Sibling to sibling
  * Among unrelated, completely decoupled components 
  
  In this chapter, we will learn the most frequently used Angular mechanisms available for inter-component communication. We will also get acquainted with 
  the tradeoffs of each mechanism, and understand the scenarios best suited for using a particular method of communication.
  
  ### The Hero Job Board sample
  
  We will build a sample application that help us involve our heroes into actions when we really need their help. In this app,
  users can act on behalf of the person in need, and also on behalf of each hero. The basic workflow is the following:
  1. The person in need invites heroes to listen to job requests. As a simplification, we keep a list of all known heroes, and invite
  each of them independently of the superpower they possess.
  1. When there's a decent job that requires superpower, the person in need announces a job request that is received by all heroes.
  1. Heroes can opt to undertake the job.
  1. When having received applications for the job, the person in need assigns the job to one and only one hero among the responding ones.
  1. The assigned hero is notified about winning the job, the others receive a message about losing the opportunity.
  
  To learn the inter-component communication methods, we go through 11 scenarios &mdash; each of them is an individual sample &mdash;, 
  and aughment the basic workflow:
  
  1. We create a prototype application that shows how the Hero Job Board application is decomposed into three components. _In this sample, we show how easy 
  establishing a tree of components is._
  1. The person in need invites heroes to listen job requests. _In this scenario, we demonstrate parent to child communication via data binding._
  1. The person in need can send job request to invited heroes. _This scenario will use parent to child communication, just like the previous one, 
  but additionally introduces a couple of new features, such as binding multiple properties and using binding expressions._
  1. A hero undertakes the job &mdash; communicating in a bad way. _We demonstrate a way a child can communicate with its parent. In this scenario, 
  we show an antipattern that should be avoided: the parent hands itself to the child through a binding._
  1. A hero undertakes the job &mdash; using event binding. _In this scenario, we apply Angular event binding, which is a preferred pattern for child to parent
  communication._
  1. _We refactor sending and undertaking the job request by introducing an intermediary component for two-way communication between parent and its children._
  1. The person in need assigns the job to one of the responding heroes. _We extend the intermediary component to handle this function._
  1. We put a little twist into the basic workflow: a losing hero can steal the job from the winner. _In this scenario, we demonstrate a desing flaw
  that should be handled when parent and child components access the same facade of an intermediary component._
  1. We prevent losing heroes by stealing the job. _We'll fix the design flow of the intermediary service by providing separate facades for the parent and child components._
  1. We add a new component, through which components can broadcast messages. Using this component, heros can brag or complain about winning or loosing, respectively. 
  _In this scenario, we demonstrate how parent and child components can send messages to an unrelated component._
  1. We add a message board that can display the broadcast messages. _We show how a component can receive messages from an unrelated component._
  
  ## #1: Building the prototype application
  
  _Content_
  
  ## #2: Inviting heroes: parent to child communication with data binding
  
  _Content_
  
  ## #3: Announcing a job: parent to child communication with multiple data binding
  
  _Content_
  
  _To be continued..._
