include _util-fns

:marked
  # Who is this guide for?

  This guide is intended to provide developers who are unfamiliar with ES6 and want to learn the
  primary features used in Angular 2. This is not a complete guide to all of the new features 
  available to you, but a tour of the most commonly used with Angular 2.
  
  It is possible to write Angular 2 using ES5 syntax, so why should you bother to learn ES6 anyways?
  
  * Angular 2 was designed with using ES6 syntax in mind.
  * It provides improved clarity and consistency in coding.
  * Many examples and tutorials are written in ES6.
  * You can choose to use as much or as little as you wish. 
  
  Many developers find using ES6 increases code quality, makes it easier to read code and understand
  intention, and can help enforce some best practices. Let's take a quick look at the primary features,
  and then we'll dig into more detail.
  
- var top="vertical-align:top"
table(width="100%")
  col(width="100%")
  tr
    th ESNext Key Features
  tr(style=top)
    td
      :marked
        ### Bindings/Interpolation
      code-example.
         Your favorite hero is: {{vm.favoriteHero}}
      :marked
        In Angular&nbsp;1, an expression in curly braces denotes one-way binding.
        This binds the value of the element to a property in the controller
        associated with this template.
        
        When using the `controller as` syntax,
        the binding is prefixed with the controller alias (`vm`) because we
        have to be specific about the source of the binding.
    td
      :marked
        ### Bindings/Interpolation
      +makeExample('cb-a1-a2-quick-reference/ts/app/movie-list.component.html', 'interpolation')(format="." )
      :marked
        In Angular&nbsp;2, a template expression in curly braces still denotes one-way binding.
        This binds the value of the element to a property of the component.
        The context of the binding is implied and is always the
        associated component, so it needs no reference variable.
        
        For more information see [Template Syntax](../guide/template-syntax.html#interpolation).

  tr(style=top)
    td
      :marked
        ### Local variables
      code-example(format="").
        &lt;tr ng-repeat="movie in vm.movies">
          &lt;td>{{movie.title}}&lt;/td>
        &lt;/tr>
      :marked
        Here, `movie` is a user-defined local variable.
    td
      :marked
        ### Local variables
      +makeExample('cb-a1-a2-quick-reference/ts/app/app.component.html', 'local')(format="." )
      :marked
        In Angular&nbsp;2, we have true local template variables that are explicitly defined using the hash (#) symbol.
        
        Using a local template variable, we can move data between elements in the template. We can use the local template
        variable on the same element, on sibling elements, or on any child elements.
        
        For more information see [Template Syntax](../guide/template-syntax.html#local-vars).

:marked

  # What is ES6, or modern JavaScript?

  ES6 is a significant evolution of the JavaScript language. It is officially known as ES2015, but
  it is typically referred to as ES6. Many major additions and improvements were added to the
  language that make writing modern web applications easier than before. In fact, more features
  are being added on a yearly basis, so you should think about it not just as ES6 but as modern
  JavaScript.

  While the history of ES6 may be a fascinating subject, you are most likely interested in learning the
  primary features that Angular uses. This guide will walk through the most important features
  that have been added to JavaScript that can make development easier.

  # How can I use ES6+ features?

  Before we dig into the features, you need to know that browser support for these features is limited.
  It will be a while before all major browsers properly support the new syntax and since new features
  are added regularly (and users don't always update quickly), we must employ the use of a transpiler
  to convert newer syntax into a format current browsers can understand.

  In Angular, [TypeScript](https://typescriptlang.org) is the most common transpiler tool, since Angular itself is built with TypeScript.
  You can use TypeScript just as a compiler even if you don't use the typing features it provides.
  Alternatively, [Babel](https://babeljs.io) is a popular choice with a large community. There are other options, most
  of which can be found at this [GitHub repo](https://github.com/addyosmani/es6-tools#transpilers).

  Your choice of transpiler is one that you can change at a later date, so we'd recommend starting
  with TypeScript and changing if you feel the need.

  Now let's start to dig into the primary features and how they are most commonly used with Angular.

  # Modules

  Modules are a programming concept to help structure code that is decoupled and independent of other
  parts of the code. JavaScript has had several module formats for years, most notably CommonJS and AMD. NodeJS developers
  have been using the CommonJS format to modularize their code. ES6 introduces a new format that we'll leverage.

  # Classes

  # Decorators
  
  Decorators are a feature that allows you to declaratively extend the behavior of another object.
  This new syntax that is actually not officially part of the JavaScript spec, but has already
  been implemented in most transpilers.

  # Arrow Functions

  # Let and Const Keywords
  
  Until now, there has only been one way to declare a variable using the `var` keyword.
  
table(width="100%")
  col(width="50%")
  col(width="50%") 
  tr
    th Angular&nbsp;1
    th Angular&nbsp;2
  tr(style=top)
    td
      :marked
        ### Bindings/Interpolation
      code-example.
         Your favorite hero is: {{vm.favoriteHero}}
      :marked
        In Angular&nbsp;1, an expression in curly braces denotes one-way binding.
        This binds the value of the element to a property in the controller
        associated with this template.
        
        When using the `controller as` syntax,
        the binding is prefixed with the controller alias (`vm`) because we
        have to be specific about the source of the binding.
    td
      :marked
        ### Bindings/Interpolation
      +makeExample('cb-a1-a2-quick-reference/ts/app/movie-list.component.html', 'interpolation')(format="." )
      :marked
        In Angular&nbsp;2, a template expression in curly braces still denotes one-way binding.
        This binds the value of the element to a property of the component.
        The context of the binding is implied and is always the
        associated component, so it needs no reference variable.
        
        For more information see [Template Syntax](../guide/template-syntax.html#interpolation).
  tr(style=top)
    td
      :marked
        ### Filters
      code-example.
         &lt;td>{{movie.title | uppercase}}&lt;/td>
      :marked
        To filter output in our templates in Angular&nbsp;1, we use the pipe character (|) and one or more filters.
        
        In this example, we filter the `title` property to uppercase.
    td
      :marked
        ### Pipes
      +makeExample('cb-a1-a2-quick-reference/ts/app/app.component.html', 'uppercase')(format="." )
      :marked
        In Angular&nbsp;2, we use similar syntax with the pipe (|) character to filter output, but now we call them **pipes**.
        Many (but not all) of the built-in filters from Angular&nbsp;1 are
        built-in pipes in Angular&nbsp;2.
        
        See the heading [Filters / Pipes](#Pipes) below for more information.
  tr(style=top)
    td
      :marked
        ### Local variables
      code-example(format="").
        &lt;tr ng-repeat="movie in vm.movies">
          &lt;td>{{movie.title}}&lt;/td>
        &lt;/tr>
      :marked
        Here, `movie` is a user-defined local variable.
    td
      :marked
        ### Local variables
      +makeExample('cb-a1-a2-quick-reference/ts/app/app.component.html', 'local')(format="." )
      :marked
        In Angular&nbsp;2, we have true local template variables that are explicitly defined using the hash (#) symbol.
        
        Using a local template variable, we can move data between elements in the template. We can use the local template
        variable on the same element, on sibling elements, or on any child elements.
        
        For more information see [Template Syntax](../guide/template-syntax.html#local-vars).

  # Template Strings

  # Default Parameter Values

  # Rest Operator

  # Spread Operator

  # Promises
