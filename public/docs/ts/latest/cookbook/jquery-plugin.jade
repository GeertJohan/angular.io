include ../_util-fns

:marked
    Using jQuery for direct DOM access is not recommended in Angular projects, but we do see value in supporting integration with third party jQuery plugins.
    
    In this cookbook we show how to integrate `draggable` and `droppable` from jQuery UI to add support for drag and drop in our application.
    
    Before a hero can set out on a new quest, one of our admins will assign the hero a new assignment by dragging and dropping the hero's name on top of the assignment.
:marked
   **See the [live example](/resources/live-examples/cb-jquery-plugin/ts/plnkr.html)**.   
   
<a id="toc"></a>
:marked
   ## Table of contents

      [jQuery Decleration](#jquery-decleration)

      [Drag](#drag)

      [Drop](#drop)
      
.l-main-section
<a id="jquery-decleration"></a>
:marked
   ## jQuery Decleration
   
   jQuery itself and plugins from jQuery UI are both external dependencies that are loaded outside of Angular.
   
   We add the necessary script tags to load both in the head tag in `index.html`.
   
+makeExample('cb-jquery-plugin/ts/index.html', 'jquery', 'index.html (add jquery scripts)')(format=".")  

:marked
    Once loaded, jQuery delcares a global `jQuery` variable. However, this global variable is not know to TypeScript. In order to reference `jQuery` we have to declare `jQuery` as a TypeScript variable as well.
    
    In our case we don't need to access the jQuery api, so we will simply declare `jQuery` as an `any` variable.
    
+makeExample('cb-jquery-plugin/ts/app/hero.component.ts', 'declare-jquery', 'app/hero.component.ts (declare jquery)')(format=".")  
   
.l-main-section
<a id="drag"></a>
:marked
   ## Drag
   
   `draggable` is a jQuery plugin that allows us to move an element on the screen. In the UI our admins will "drag" heroes and drop them on assignments.
   
    `HeroComponent` is created to represent "draggable" hero elements.  

+makeTabs(
  `cb-jquery-plugin/ts/app/hero.component.ts,
   cb-jquery-plugin/ts/app/hero.component.html`,
  null,
  `hero.component.ts,
   hero.component.html`
)  

:marked
    We want to be careful not to access the DOM directly, so we are making use of `@ViewChild` to access the target element for the `draggable` plugin. 
    
    `@ViewChild('hero')` declares a reference to a child element in the template with a matching `#hero` variable reference. 

:marked
    Now, we can go ahead and apply the `draggable` plugin to the `nativeElement` of the `@ViewChild` using familiar jquery syntax.
+makeExample('cb-jquery-plugin/ts/app/hero.component.ts', 'add-plugin', 'app/hero.component.ts (add plugin)')(format=".")  

:marked
    We are applying the plugin in the `AfterViewInit` lifecycle hook since we know the component view has been fully initialized at this point. 
   
.l-main-section
<a id="drop"></a>
:marked
   ## Drop    
   
   `droppable` is used in tandem with `draggable` to create a dropzone for dragged elements. 
   
   Our heroes are dropped on assignments, so we have created `HeroAssignmentComponent` to represent a specific assignment.

+makeTabs(
  `cb-jquery-plugin/ts/app/hero-assignment.component.ts,
   cb-jquery-plugin/ts/app/hero-assignment.component.html`,
  null,
  `hero-assignment.component.ts,
   hero-assignment.component.html`
)   

:marked
    Same as with `draggable`, we are applying the `droppable` plugin during `AfterViewInit`.
    
    `droppable` lets us specify a callback hook for when a hero is dropped on the assignment. We use this callback to set `this.heroDropped = true` to change the styling of the assingment once a hero is ready to take it on.  

+makeExample('cb-jquery-plugin/ts/app/hero-assignment.component.ts', 'add-plugin', 'app/hero-assignment.component.ts (add plugin)')(format=".")  
          
:marked
    The final UI looks like this:
figure.image-display
   img(src="/resources/images/cookbooks/jquery-plugin/hero-assignments.png" alt="Hero Assignments")
    
          
      